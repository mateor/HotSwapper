#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2014 Mateor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Initialize a build environment and build roms.
#    Switch between building any of several popular custom ROMs with one command


# PLEASE edit values in BUILD file or WOE BETIDE YOU!

# populate environmental variables and pass to children
source BUILD
[[ -f "$SETUP_FILE" ]] && source "$SETUP_FILE"
set -a


usage () {
     echo ""
     echo "DESCRIPTION:"
     echo ""
     echo "Small shell app by @mateor."
     echo "    Easily switch between custom rom flavors and branches."
     echo ""
     echo "!! You will want to set some environmental variables in the BUILD file !!"
     echo ""
     echo "OPTIONS:"
     echo "    ${bold}make${normal} ( ${bold}<ROMTYPE>${normal} || ${bold}<ANDROID_VERSION>${normal} )" 
     echo "           : creates a flashable zip of one of several ROMTYPES"
     echo ""
     echo "             valid ${bold}ROMTYPES${normal} are ( aosp, cm, aokp, omni, pac, pa, vanir, slim)"
     echo "             valid ${bold}ANDROID_VERSION${normal} depends on ROMTYPE, it's the Android version:
                              (2.3, 4.0, 4.1. 4.2. 4.3. 4.4 )"
     echo "             This command should pull sources, lunch, and build binaries"
     echo ""
     exit $exit_code
}

remind_about_BUILD() {
     echo ""
     echo " You must edit the files in ${HOT_SWAPPER_LOC}/BUILD"
     echo ""
     echo " This is a safety precaution to avoid downloads to accidental spots"
     echo " Please create a directory to matchgigit the ANDROID_HOME entry in BUILD file."
     echo ""
     exit 1
}

prompt_bootstrap() {
     echo ""
     echo "    It looks like this is the first time you have run the HotSwapper."
     echo ""
     echo "    In order to begin building Android ROMs, you must "
     echo "         initialize the build environment."
     echo "    \"sudo ./bootstrap\" will install the packages you need to build."
     echo ""
     echo "    Skip this by running \"./bootstrap --skip\" and set up your own."
     echo ""
     exit 1
}

install_repo() {
     mkdir -p ~/bin
     curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
     chmod a+x ~/bin/repo

     if !([ -d "~/bin" ] && [[ ":$PATH:" != *":~/bin:"* ]]); then
          echo '# HotSwapper added bin to path for Android Builds'  >> ~/.bashrc
          echo 'export PATH=${PATH}:~/bin' >> ~/.bashrc
     fi

     source ~/.bashrc
}

install_sdk() {
     echo "Downloading Android SDK. You will be prompted to accept the license."
     echo "$CURRENT_SDK is current sdk"
     wget "$CURRENT_SDK" -O "$HOT_SWAPPER_LOC"/android-sdk.tgz
     tar -C ~/ -xf android-sdk.tgz

     # only downloaded base packages
     ~/android-sdk-linux/tools/android update sdk -u --filter platform-tools,android-"$MOST_RECENT_API",extra-android-support

     if !([ -d "~/android-sdk*" ] && [[ ":$PATH:" != *":~/android*/tools:"* ]]); then
          echo '# Android SDK'  >> ~/.bashrc
          echo 'PATH=${PATH}:~/android-sdk/tools' >> ~/.bashrc
          echo 'PATH=${PATH}:~/android-sdk/platform-tools' >> ~/.bashrc
     fi
     rm "$HOT_SWAPPER_LOC"/android-sdk.tgz
}

finish_bootstrap() {
     echo ""
     echo "We are going to finish the bootstrap now."
     echo ""
     # if they do not have repo, install it.
     [ -n "$(command -v repo)" ] || install_repo
     # get Android SDK
     [ -n "$(command -v android)" ] || install_sdk
     echo "BOOTSTRAP_COMPLETE=true" >> "$HOT_SWAPPER_LOC"/"$SETUP_FILE"
     echo ""
     echo "Your Build environment has been intialized."
     echo ""
     echo "  Please be aware we do not set-up CCACHE."
     echo "  It can considerably speed up your builds but takes up to 100 gigs of disk."
     echo "  If you can spare the space, see the directions on the Android website."
     echo ""
     echo " Please close this shell and run HotSwapper in a new terminal."
     echo ""
     source ~/.bashrc && exit 0
}

if [[ "$#" == 0 ]]; then
     usage
fi

# check for lifelines
for arg in $@; do
     #TODO @mateor Add a help for each command
     if ( [[ $arg == "h" ]] || [[ $arg == "-h" ]] || [[ $arg == "--h" ]] || [[ $arg == "help" ]] || [[ $arg == "-help" ]] || [[ $arg == "--help" ]] ); then
          usage
     fi
done

# Explicitly check for ANDROID_HOME to avoid people downloading source in the wrong spot by accident.
[[ -d $ANDROID_HOME ]] || remind_about_BUILD

# check if they have bootstrapped. If not do so. This should be non-destructive to existing build enviroments.
[[ -f "$SETUP_FILE" ]] || prompt_bootstrap
[[ ! "$BOOTSTRAP_COMPLETE" == "true" ]] && finish_bootstrap

case "$1" in
[Mm]ake)
     # I would at one point like to manage the exit code to make these conditional
     #    but it will require some investigation into the standard return values from make.
     source $HOT_SWAPPER_LOC/src/orderBuilds.sh "$2" "$3"
     ;;
[Pp]ull)
     # just fetch sources and don't compile
     # how best to do this?
     ;;
*)
     echo ""
     echo "!!! Command not recognized !!!"
     exit_code=-1 && usage
     ;;
esac

exit 0
